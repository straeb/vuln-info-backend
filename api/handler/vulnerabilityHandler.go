package handler

import (
	"github.com/gin-gonic/gin"
	"net/http"
	"vuln-info-backend/api/helper"
	"vuln-info-backend/models"
	"vuln-info-backend/persistance/crud"
)

var vulnerability crud.VulnerabilityCRUD

func GetAllVulnerabilities(c *gin.Context) {
	var input models.Vulnerability

	err := c.ShouldBind(&input)

	vulns, err := vulnerability.GetAll(&input)
	helper.AnswerGetAll(vulns, err, c)

}

func GetAllVulnerabilitiesCpe(c *gin.Context) {
	var input models.Vulnerability
	//Bind Query Parameter
	err := c.ShouldBind(&input)
	//Bind cpe Parameter
	cpe := c.Query("cpe")

	vulns, err := vulnerability.GetAllWithCpe(&input, cpe)
	helper.AnswerGetAll(vulns, err, c)
}

func GetVulnerabilityById(c *gin.Context) {

	vuln, err := vulnerability.GetById(c.Param("id"))
	helper.Answer(vuln, err, c)

}

func GetVulnerabilitiesByIdCpe(c *gin.Context) {

	vuln, err := vulnerability.GetByIdWithCpe(c.Param("id"))
	helper.Answer(vuln, err, c)

}

func CreateVulnerability(c *gin.Context) {
	var input models.CreateVulnerabilityInput

	if err := helper.BindJSON(&input, c); err == nil {
		newVuln, err := vulnerability.Create(input)
		helper.Answer(newVuln, err, c)
	}
}

func UpdateVulnerability(c *gin.Context) {
	var input models.UpdateVulnerabilityInput

	if err := helper.BindJSON(&input, c); err == nil {
		updatedVuln, err := vulnerability.Update(c.Param("id"), input)
		helper.Answer(updatedVuln, err, c)
	}
}

func DeleteVulnerability(c *gin.Context) {
	if err := vulnerability.Delete(c.Param("id")); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}
	c.JSON(http.StatusOK, gin.H{"data": "Deleted"})

}
