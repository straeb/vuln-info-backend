// Package docs GENERATED BY SWAG; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/auth/login": {
            "post": {
                "description": "Login Endpoint takes username and password and returns a JWT-Token if authorized.",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Authorization"
                ],
                "summary": "Login Endpoint",
                "parameters": [
                    {
                        "description": "Login Credentials",
                        "name": "Credentials",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CreateUpdateUserInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handler.LoginSuccess"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/helper.ApiError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/auth/signup": {
            "post": {
                "description": "SingUp Endpoint takes username and password and returns a user object.",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Authorization"
                ],
                "summary": "Sign Up Endpoint",
                "parameters": [
                    {
                        "description": "username and password",
                        "name": "Credentials",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CreateUpdateUserInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/helper.ApiError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/components": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns all listed components.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Components"
                ],
                "summary": "Get All Components",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Get components by vendor name.",
                        "name": "vendor",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Get components assigned to specific username (e-mail).",
                        "name": "for",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Component"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/helper.ApiError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Create a new component. Vendor must be created in the first place.\nReturns created component.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Components"
                ],
                "summary": "Create a new component",
                "parameters": [
                    {
                        "description": "Add Component.",
                        "name": "Component",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CreateUpdateComponentInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Component"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/helper.ApiError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/components/search": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Search component by name.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Components"
                ],
                "summary": "Search Component",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Search components by name.",
                        "name": "q",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Component"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/helper.ApiError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/components/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns component for a specific ID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Components"
                ],
                "summary": "Get component by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "component ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Component"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/helper.ApiError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Delete a specific component.\nWill not succeed if component is in use by other users.",
                "tags": [
                    "Components"
                ],
                "summary": "Delete a component",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "component ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/helper.ApiError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Update an existing component.\nWill not succeed if component is in use by other users.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Components"
                ],
                "summary": "Update a component",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "component ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update Component.",
                        "name": "Component",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CreateUpdateComponentInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Component"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/helper.ApiError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/components/{id}/subscribe": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Subscribe a user via username (e-mail) to an specific entry.",
                "tags": [
                    "Components"
                ],
                "summary": "Subscribe a user to a component",
                "parameters": [
                    {
                        "type": "string",
                        "description": "user to subscribe",
                        "name": "user",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "component ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/helper.ApiError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/components/{id}/unsubscribe": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Unsubscribe a user via username (e-mail) from an specific entry.",
                "tags": [
                    "Components"
                ],
                "summary": "Unsubscribe a user form a component",
                "parameters": [
                    {
                        "type": "string",
                        "description": "user to remove",
                        "name": "user",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "component ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/helper.ApiError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/components/{id}/vulnerabilities": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns all listed vulnerabilities for a specific component.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Components"
                ],
                "summary": "Get component vulnerabilities by ID.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "component ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Vulnerability"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/helper.ApiError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/config/match": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Checks the components against vulnerabilities for a given time period.\nE.g.: '.../match?from=0?to=-10' covers Notifications created between today and 10 days ago.",
                "tags": [
                    "Config"
                ],
                "summary": "Check components for vulnerabilities",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "From days back: '0' = today. Must be \u003c 1.",
                        "name": "from",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "To days back. Must be \u003c 0.",
                        "name": "to",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/helper.ApiError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/config/rss": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Fetches the RSS Feed and runs the Parser, if new entries are available.",
                "tags": [
                    "Config"
                ],
                "summary": "Fetch RSS",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/helper.ApiError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/notifications": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns all listed notifications.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Notifications"
                ],
                "summary": "Get All notifications",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Get notifications for a DFN-Link.",
                        "name": "link",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Get all Notifications for a specific CVSS base score.",
                        "name": "cvss_base",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Get all Notifications for a specific CVSS exploitability score.",
                        "name": "cvss_exploitability",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Get all Notifications for a specific CVSS impact score.",
                        "name": "cvss_impact",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Get all Notifications for a specific CVSS temporal score.",
                        "name": "cvss_temp",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Get all Notifications associated with a specific CVE-ID. Will not succeed in combination with 'cve_id' or 'for'.",
                        "name": "cve_id",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Get all Notifications associated with or without a CVEs. Will not succeed in combination with 'cve' or 'for'.",
                        "name": "cve",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Get all Notifications that match components of a username (e-mail). Will not succeed in combination with 'cve' or 'cve_id'.",
                        "name": "for",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Notification"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/helper.ApiError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/notifications/search": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Search notifications by title.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Notifications"
                ],
                "summary": "Search notifications",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Search notifications by title.",
                        "name": "q",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Notification"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/helper.ApiError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/notifications/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns notification for a specific ID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Notifications"
                ],
                "summary": "Get notification by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "notification ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Notification"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/helper.ApiError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/vendors": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns a list of all vendors.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Vendors"
                ],
                "summary": "Get All Vendors",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Vendor"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/helper.ApiError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Create a new Vendor.\nReturns created vendor.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Vendors"
                ],
                "summary": "Create a new vendor",
                "parameters": [
                    {
                        "description": "Add Vendor.",
                        "name": "Vendor",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CreateUpdateVendorInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Vendor"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/helper.ApiError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/vendors/search": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Search vendor by name.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Vendors"
                ],
                "summary": "Search vendor",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Search vendor by name.",
                        "name": "q",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Vendor"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/helper.ApiError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/vendors/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns vedndor for a specific ID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Vendors"
                ],
                "summary": "Get vendor by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "vendor ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Vendor"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/helper.ApiError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Delete a specific component.\nWill not succeed if vendor is in use by a component.",
                "tags": [
                    "Vendors"
                ],
                "summary": "Delete a vendor",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "component ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/helper.ApiError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Update an existing vendor.\nWill not succeed if vendor is in use by a component.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Vendors"
                ],
                "summary": "Update a vendor entry",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "vendor ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update Vendor.",
                        "name": "Vendor",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CreateUpdateVendorInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Vendor"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/helper.ApiError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/vulnerabilities": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns a list of all vulnerabilities which have been mentioned in notifications containing a CVE-ID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Vulnerabilities"
                ],
                "summary": "Get all notified vulnerabilities",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Vulnerability"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/helper.ApiError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/vulnerabilities/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns vulnerability entry for a specific CVE-ID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Vulnerabilities"
                ],
                "summary": "Get vulnerability by CVE-ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "CVE-ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Vulnerability"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/helper.ApiError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "handler.LoginSuccess": {
            "type": "object",
            "properties": {
                "token": {
                    "type": "string"
                }
            }
        },
        "helper.ApiError": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "models.Component": {
            "type": "object",
            "properties": {
                "cpe": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "owners": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.User"
                    }
                },
                "vendor": {
                    "$ref": "#/definitions/models.Vendor"
                },
                "version": {
                    "type": "string"
                },
                "vulnerabilities": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Vulnerability"
                    }
                }
            }
        },
        "models.CreateUpdateComponentInput": {
            "type": "object",
            "required": [
                "cpe",
                "name",
                "vendorId",
                "version"
            ],
            "properties": {
                "cpe": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "vendorId": {
                    "type": "integer"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "models.CreateUpdateUserInput": {
            "type": "object",
            "required": [
                "e_mail",
                "password"
            ],
            "properties": {
                "e_mail": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "models.CreateUpdateVendorInput": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "type": "string"
                }
            }
        },
        "models.Notification": {
            "type": "object",
            "properties": {
                "cvss_base": {
                    "type": "string"
                },
                "cvss_exploitability": {
                    "type": "string"
                },
                "cvss_impact": {
                    "type": "string"
                },
                "cvss_temp": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "link": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "pub_date": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "vulnerabilities": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Vulnerability"
                    }
                }
            }
        },
        "models.User": {
            "type": "object",
            "required": [
                "e_mail"
            ],
            "properties": {
                "e_mail": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                }
            }
        },
        "models.Vendor": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "models.Vulnerability": {
            "type": "object",
            "properties": {
                "cve": {
                    "type": "string"
                },
                "cwe": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "description": "Use this token format: 'Bearer {key}'",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "/api/v1",
	Schemes:          []string{},
	Title:            "Vulnerability-Info-API",
	Description:      "## General\nThis is the documentation of the Vulnerability-Info-API.\nVulnerability-Info-API receives vulnerability related notification from the DFN-CERT and scans it for CVEs. If CVEs are present more information about the vulnerabilities will be fetched and saved in association with the notification that supplied the information. If the provided notification does not contain any CVEs it will be saved anyway but no further information will be generated but the notification will also be available.\n\nOn a regular basis, all saved notifications that came with CVE information will be compared with the stored components via CPE identifier. If one of the components is affected by a provided information, they will also get associated and these relations will be made available through this API.\n\nThe basic workflow is described in the following, but it's recommended to use an UI (WIP) based on this API.\n\n## Basic Workflow\n\n### 1. Create an account\nCreate an Account and sign up at `/auth/signup`\n\n### 2. Login\nLogin with your freshly created account under `auth/login`\nYou will receive a token to authorize your further requests. Use it in the request header like   `Authorization: Bearer <token>`\n\n### 4. Search or Add your components\nSearch for exiting components via `/components/search` or create new ones:\n1. Search for stored Vendors at `/vendors/search` or create them at `vendors`.\n2. Create new components at `/components` with the previous given `vendorID`. Please make sure to set a proper CPE. It's recommended to get them form the official [CPE Dictionary](https://nvd.nist.gov/products/cpe/search)\n\n### 5. Subscribe to your components\nSubscribe to the components you like to monitor via  `/components/{id}/subscribe?user=example@domain.com`\n\n### 6. Check for notifications\nRegularly check for notifications that address you and your components at `/notifications?for=example@domain.com` or browse all stored notifications at `/notifications`\n\n## Further Work\n- **Frontend**: Development of a GUI is planed, to make this more useful.\n- **Authorization**: Authorization is pretty basic by now. It's mainly used to provide information for particular users. However, switching to a more complex authorization method not useful until a GUI is given.\n",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
