basePath: /api/v1
definitions:
  handler.LoginSuccess:
    properties:
      token:
        type: string
    type: object
  helper.ApiError:
    properties:
      error:
        type: string
    type: object
  models.Component:
    properties:
      cpe:
        type: string
      id:
        type: integer
      name:
        type: string
      owners:
        items:
          $ref: '#/definitions/models.User'
        type: array
      vendor:
        $ref: '#/definitions/models.Vendor'
      version:
        type: string
      vulnerabilities:
        items:
          $ref: '#/definitions/models.Vulnerability'
        type: array
    type: object
  models.CreateUpdateComponentInput:
    properties:
      cpe:
        type: string
      name:
        type: string
      vendorId:
        type: integer
      version:
        type: string
    required:
    - cpe
    - name
    - vendorId
    - version
    type: object
  models.CreateUpdateUserInput:
    properties:
      e_mail:
        type: string
      password:
        type: string
    required:
    - e_mail
    - password
    type: object
  models.CreateUpdateVendorInput:
    properties:
      name:
        type: string
    required:
    - name
    type: object
  models.Notification:
    properties:
      cvss_base:
        type: string
      cvss_exploitability:
        type: string
      cvss_impact:
        type: string
      cvss_temp:
        type: string
      id:
        type: integer
      link:
        type: string
      message:
        type: string
      pub_date:
        type: string
      title:
        type: string
      vulnerabilities:
        items:
          $ref: '#/definitions/models.Vulnerability'
        type: array
    type: object
  models.User:
    properties:
      e_mail:
        type: string
      id:
        type: integer
    required:
    - e_mail
    type: object
  models.Vendor:
    properties:
      id:
        type: integer
      name:
        type: string
    required:
    - name
    type: object
  models.Vulnerability:
    properties:
      cve:
        type: string
      cwe:
        type: string
      description:
        type: string
    type: object
info:
  contact: {}
  description: |
    ## General
    This is the documentation of the Vulnerability-Info-API.
    Vulnerability-Info-API receives vulnerability related notification from the DFN-CERT and scans it for CVEs. If CVEs are present more information about the vulnerabilities will be fetched and saved in association with the notification that supplied the information. If the provided notification does not contain any CVEs it will be saved anyway but no further information will be generated but the notification will also be available.

    On a regular basis, all saved notifications that came with CVE information will be compared with the stored components via CPE identifier. If one of the components is affected by a provided information, they will also get associated and these relations will be made available through this API.

    The basic workflow is described in the following, but it's recommended to use an UI (WIP) based on this API.

    ## Basic Workflow

    ### 1. Create an account
    Create an Account and sign up at `/auth/signup`

    ### 2. Login
    Login with your freshly created account under `auth/login`
    You will receive a token to authorize your further requests. Use it in the request header like   `Authorization: Bearer <token>`

    ### 4. Search or Add your components
    Search for exiting components via `/components/search` or create new ones:
    1. Search for stored Vendors at `/vendors/search` or create them at `vendors`.
    2. Create new components at `/components` with the previous given `vendorID`. Please make sure to set a proper CPE. It's recommended to get them form the official [CPE Dictionary](https://nvd.nist.gov/products/cpe/search)

    ### 5. Subscribe to your components
    Subscribe to the components you like to monitor via  `/components/{id}/subscribe?user=example@domain.com`

    ### 6. Check for notifications
    Regularly check for notifications that address you and your components at `/notifications?for=example@domain.com` or browse all stored notifications at `/notifications`

    ## Further Work
    - **Frontend**: Development of a GUI is planed, to make this more useful.
    - **Authorization**: Authorization is pretty basic by now. It's mainly used to provide information for particular users. However, switching to a more complex authorization method not useful until a GUI is given.
  title: Vulnerability-Info-API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Login Endpoint takes username and password and returns a JWT-Token
        if authorized.
      parameters:
      - description: Login Credentials
        in: body
        name: Credentials
        required: true
        schema:
          $ref: '#/definitions/models.CreateUpdateUserInput'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.LoginSuccess'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helper.ApiError'
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
      summary: Login Endpoint
      tags:
      - Authorization
  /auth/signup:
    post:
      consumes:
      - application/json
      description: SingUp Endpoint takes username and password and returns a user
        object.
      parameters:
      - description: username and password
        in: body
        name: Credentials
        required: true
        schema:
          $ref: '#/definitions/models.CreateUpdateUserInput'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helper.ApiError'
        "404":
          description: Not Found
          schema:
            type: string
      summary: Sign Up Endpoint
      tags:
      - Authorization
  /components:
    get:
      description: Returns all listed components.
      parameters:
      - description: Get components by vendor name.
        in: query
        name: vendor
        type: string
      - description: Get components assigned to specific username (e-mail).
        in: query
        name: for
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Component'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helper.ApiError'
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Get All Components
      tags:
      - Components
    post:
      consumes:
      - application/json
      description: |-
        Create a new component. Vendor must be created in the first place.
        Returns created component.
      parameters:
      - description: Add Component.
        in: body
        name: Component
        required: true
        schema:
          $ref: '#/definitions/models.CreateUpdateComponentInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Component'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helper.ApiError'
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Create a new component
      tags:
      - Components
  /components/{id}:
    delete:
      description: |-
        Delete a specific component.
        Will not succeed if component is in use by other users.
      parameters:
      - description: component ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helper.ApiError'
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Delete a component
      tags:
      - Components
    get:
      description: Returns component for a specific ID.
      parameters:
      - description: component ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Component'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helper.ApiError'
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Get component by ID
      tags:
      - Components
    patch:
      consumes:
      - application/json
      description: |-
        Update an existing component.
        Will not succeed if component is in use by other users.
      parameters:
      - description: component ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update Component.
        in: body
        name: Component
        required: true
        schema:
          $ref: '#/definitions/models.CreateUpdateComponentInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Component'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helper.ApiError'
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Update a component
      tags:
      - Components
  /components/{id}/subscribe:
    post:
      description: Subscribe a user via username (e-mail) to an specific entry.
      parameters:
      - description: user to subscribe
        in: query
        name: user
        required: true
        type: string
      - description: component ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helper.ApiError'
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Subscribe a user to a component
      tags:
      - Components
  /components/{id}/unsubscribe:
    post:
      description: Unsubscribe a user via username (e-mail) from an specific entry.
      parameters:
      - description: user to remove
        in: query
        name: user
        required: true
        type: string
      - description: component ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helper.ApiError'
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Unsubscribe a user form a component
      tags:
      - Components
  /components/{id}/vulnerabilities:
    get:
      description: Returns all listed vulnerabilities for a specific component.
      parameters:
      - description: component ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Vulnerability'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helper.ApiError'
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Get component vulnerabilities by ID.
      tags:
      - Components
  /components/search:
    get:
      description: Search component by name.
      parameters:
      - description: Search components by name.
        in: query
        name: q
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Component'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helper.ApiError'
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Search Component
      tags:
      - Components
  /config/match:
    get:
      description: |-
        Checks the components against vulnerabilities for a given time period.
        E.g.: '.../match?from=0?to=-10' covers Notifications created between today and 10 days ago.
      parameters:
      - description: 'From days back: ''0'' = today. Must be < 1.'
        in: query
        name: from
        required: true
        type: integer
      - description: To days back. Must be < 0.
        in: query
        name: to
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helper.ApiError'
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Check components for vulnerabilities
      tags:
      - Config
  /config/rss:
    get:
      description: Fetches the RSS Feed and runs the Parser, if new entries are available.
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helper.ApiError'
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Fetch RSS
      tags:
      - Config
  /notifications:
    get:
      description: Returns all listed notifications.
      parameters:
      - description: Get notifications for a DFN-Link.
        in: query
        name: link
        type: string
      - description: Get all Notifications for a specific CVSS base score.
        in: query
        name: cvss_base
        type: string
      - description: Get all Notifications for a specific CVSS exploitability score.
        in: query
        name: cvss_exploitability
        type: string
      - description: Get all Notifications for a specific CVSS impact score.
        in: query
        name: cvss_impact
        type: string
      - description: Get all Notifications for a specific CVSS temporal score.
        in: query
        name: cvss_temp
        type: string
      - description: Get all Notifications associated with a specific CVE-ID. Will
          not succeed in combination with 'cve_id' or 'for'.
        in: query
        name: cve_id
        type: string
      - description: Get all Notifications associated with or without a CVEs. Will
          not succeed in combination with 'cve' or 'for'.
        in: query
        name: cve
        type: boolean
      - description: Get all Notifications that match components of a username (e-mail).
          Will not succeed in combination with 'cve' or 'cve_id'.
        in: query
        name: for
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Notification'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helper.ApiError'
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Get All notifications
      tags:
      - Notifications
  /notifications/{id}:
    get:
      description: Returns notification for a specific ID.
      parameters:
      - description: notification ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Notification'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helper.ApiError'
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Get notification by ID
      tags:
      - Notifications
  /notifications/search:
    get:
      description: Search notifications by title.
      parameters:
      - description: Search notifications by title.
        in: query
        name: q
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Notification'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helper.ApiError'
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Search notifications
      tags:
      - Notifications
  /vendors:
    get:
      description: Returns a list of all vendors.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Vendor'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helper.ApiError'
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Get All Vendors
      tags:
      - Vendors
    post:
      consumes:
      - application/json
      description: |-
        Create a new Vendor.
        Returns created vendor.
      parameters:
      - description: Add Vendor.
        in: body
        name: Vendor
        required: true
        schema:
          $ref: '#/definitions/models.CreateUpdateVendorInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Vendor'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helper.ApiError'
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Create a new vendor
      tags:
      - Vendors
  /vendors/{id}:
    delete:
      description: |-
        Delete a specific component.
        Will not succeed if vendor is in use by a component.
      parameters:
      - description: component ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helper.ApiError'
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Delete a vendor
      tags:
      - Vendors
    get:
      description: Returns vedndor for a specific ID.
      parameters:
      - description: vendor ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Vendor'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helper.ApiError'
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Get vendor by ID
      tags:
      - Vendors
    patch:
      consumes:
      - application/json
      description: |-
        Update an existing vendor.
        Will not succeed if vendor is in use by a component.
      parameters:
      - description: vendor ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update Vendor.
        in: body
        name: Vendor
        required: true
        schema:
          $ref: '#/definitions/models.CreateUpdateVendorInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Vendor'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helper.ApiError'
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Update a vendor entry
      tags:
      - Vendors
  /vendors/search:
    get:
      description: Search vendor by name.
      parameters:
      - description: Search vendor by name.
        in: query
        name: q
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Vendor'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helper.ApiError'
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Search vendor
      tags:
      - Vendors
  /vulnerabilities:
    get:
      description: Returns a list of all vulnerabilities which have been mentioned
        in notifications containing a CVE-ID.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Vulnerability'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helper.ApiError'
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Get all notified vulnerabilities
      tags:
      - Vulnerabilities
  /vulnerabilities/{id}:
    get:
      description: Returns vulnerability entry for a specific CVE-ID.
      parameters:
      - description: CVE-ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Vulnerability'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helper.ApiError'
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Get vulnerability by CVE-ID
      tags:
      - Vulnerabilities
securityDefinitions:
  ApiKeyAuth:
    description: 'Use this token format: ''Bearer {key}'''
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
