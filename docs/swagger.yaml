basePath: /api/v1
definitions:
  controller.ApiError:
    properties:
      error:
        type: string
    type: object
  controller.LoginSuccess:
    properties:
      token:
        type: string
    type: object
  models.Component:
    properties:
      cpe:
        type: string
      id:
        type: integer
      name:
        type: string
      owners:
        description: constraint:OnUpdate:CASCADE,OnDelete:SET NULL;"`
        items:
          $ref: '#/definitions/models.User'
        type: array
      vendor:
        $ref: '#/definitions/models.Vendor'
      version:
        type: string
      vulnerabilities:
        description: constraint:OnUpdate:CASCADE,OnDelete:SET NULL;"`
        items:
          $ref: '#/definitions/models.Vulnerability'
        type: array
    type: object
  models.CreateUpdateComponentInput:
    properties:
      cpe:
        type: string
      name:
        type: string
      vendorId:
        type: integer
      version:
        type: string
    required:
    - cpe
    - name
    - vendorId
    - version
    type: object
  models.CreateUpdateUserInput:
    properties:
      e_mail:
        type: string
      password:
        type: string
    required:
    - e_mail
    - password
    type: object
  models.CreateUpdateVendorInput:
    properties:
      name:
        type: string
    required:
    - name
    type: object
  models.User:
    properties:
      e_mail:
        type: string
      id:
        type: integer
    required:
    - e_mail
    type: object
  models.Vendor:
    properties:
      id:
        type: integer
      name:
        type: string
    required:
    - name
    type: object
  models.Vulnerability:
    properties:
      cve:
        type: string
      cwe:
        type: string
      description:
        type: string
    type: object
info:
  contact: {}
  description: This is the endpoint for component operations
  title: Vulnerability API
  version: "1.0"
paths:
  /components:
    get:
      description: Returns all listed components.
      parameters:
      - description: Authorization
        in: header
        name: Authorization
        required: true
        type: string
      - description: Search components by name.
        in: query
        name: search
        type: string
      - description: Get components by vendor name.
        in: query
        name: vendor
        type: string
      - description: Get components assigned to specific username (e-mail).
        in: query
        name: for
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Component'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ApiError'
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Get All Components
      tags:
      - Components
    post:
      consumes:
      - application/json
      description: |-
        Create a new component. Vendor must be created in the first place.
        Returns created component.
      parameters:
      - description: Authorization
        in: header
        name: Authorization
        required: true
        type: string
      - description: Add Component.
        in: body
        name: Component
        required: true
        schema:
          $ref: '#/definitions/models.CreateUpdateComponentInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Component'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ApiError'
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Create a new component
      tags:
      - Components
  /components/{id}:
    delete:
      description: |-
        Delete a specific component.
        Will not succeed if component is in use by other users.
      parameters:
      - description: Authorization
        in: header
        name: Authorization
        required: true
        type: string
      - description: component ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ApiError'
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Delete a component
      tags:
      - Components
    get:
      description: Returns component for a specific ID.
      parameters:
      - description: Authorization
        in: header
        name: Authorization
        required: true
        type: string
      - description: component ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Component'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ApiError'
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Get component by ID
      tags:
      - Components
    patch:
      consumes:
      - application/json
      description: |-
        Update an existing component.
        Will not succeed if component is in use by other users.
      parameters:
      - description: Authorization
        in: header
        name: Authorization
        required: true
        type: string
      - description: component ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update Component.
        in: body
        name: Component
        required: true
        schema:
          $ref: '#/definitions/models.CreateUpdateComponentInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Component'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ApiError'
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Update a component
      tags:
      - Components
    post:
      description: |-
        (Un-)Subscribe an user via username (e-mail) to an specific entry.
        Only ONE parameter is accepted. If both are provided "subscribe" will be accepted.
      parameters:
      - description: Authorization
        in: header
        name: Authorization
        required: true
        type: string
      - description: Subscribe user
        in: query
        name: subscribe
        required: true
        type: string
      - description: Subscribe user
        in: query
        name: unsubscribe
        required: true
        type: string
      - description: component ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ApiError'
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: (Un-)Subscribe to a component
      tags:
      - Components
  /components/{id}/vulnerabilities:
    get:
      description: Returns all listed vulnerabilities for a specific component.
      parameters:
      - description: Authorization
        in: header
        name: Authorization
        required: true
        type: string
      - description: component ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Vulnerability'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ApiError'
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Get component vulnerabilities by ID.
      tags:
      - Components
  /login:
    post:
      consumes:
      - application/json
      description: Login Endpoint takes username and password and returns a JWT-Token
        if authorized.
      parameters:
      - description: Login Credentials
        in: body
        name: Credentials
        required: true
        schema:
          $ref: '#/definitions/models.CreateUpdateUserInput'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.LoginSuccess'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ApiError'
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
      summary: Login Endpoint
      tags:
      - Authorization
  /signup:
    post:
      consumes:
      - application/json
      description: SingUp Endpoint takes username and password and returns a user
        object.
      parameters:
      - description: username and password
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/models.CreateUpdateUserInput'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ApiError'
        "404":
          description: Not Found
          schema:
            type: string
      summary: Sign Up Endpoint
      tags:
      - Authorization
  /vendors:
    get:
      description: Returns a list of all vendors.
      parameters:
      - description: Authorization
        in: header
        name: Authorization
        required: true
        type: string
      - description: Search vendor by name.
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Vendor'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ApiError'
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Get All Vendors
      tags:
      - Vendors
    post:
      consumes:
      - application/json
      description: |-
        Create a new Vendor.
        Returns created vendor.
      parameters:
      - description: Authorization
        in: header
        name: Authorization
        required: true
        type: string
      - description: Add Vendor.
        in: body
        name: Vendor
        required: true
        schema:
          $ref: '#/definitions/models.CreateUpdateVendorInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Vendor'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ApiError'
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Create a new vendor
      tags:
      - Vendors
  /vendors/{id}:
    delete:
      description: |-
        Delete a specific component.
        Will not succeed if vendor is in use by a component.
      parameters:
      - description: Authorization
        in: header
        name: Authorization
        required: true
        type: string
      - description: component ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ApiError'
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Delete a vendor
      tags:
      - Vendors
    get:
      description: Returns vedndor for a specific ID.
      parameters:
      - description: Authorization
        in: header
        name: Authorization
        required: true
        type: string
      - description: vendor ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Vendor'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ApiError'
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Get vendor by ID
      tags:
      - Vendors
    patch:
      consumes:
      - application/json
      description: |-
        Update an existing vendor.
        Will not succeed if vendor is in use by a component.
      parameters:
      - description: Authorization
        in: header
        name: Authorization
        required: true
        type: string
      - description: vendor ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update Vendor.
        in: body
        name: Vendor
        required: true
        schema:
          $ref: '#/definitions/models.CreateUpdateVendorInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Vendor'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ApiError'
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Update a vendor entry
      tags:
      - Vendors
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Bearer <Add access token here>
    type: apiKey
swagger: "2.0"
